<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CalibrationApp</name>
    </assembly>
    <members>
        <member name="M:CalibrationApp.Controllers.CalibrationController.GetContactTypes">
            <summary>
            Gets all of the contact types associated with calibrations
            </summary>
            <returns>List of contact types</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.CalibrationController.CreateCalibration(CalibrationApp.Models.Calibration)">
            <summary>
            Creates a calibration
            </summary>
            <param name="calibration"></param>
            <returns>The new calibration with a CalibrationID</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.CalibrationController.GetSingleCalibration(System.Int32)">
            <summary>
            Gets a specific calibration by its CalibrationID number
            </summary>
            <param name="calibrationId">The CalibrationID you're looking for</param>
            <returns>A single calibration</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.CalibrationController.GetAllCalibrations">
            <summary>
            Retrieves all calibrations in reverse chronological order
            </summary>
            <returns>All calibrations</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.CalibrationController.SwitchCalibrationIsOpen(System.Int32)">
            <summary>
            Updates the IsOpen category of a calibration to prevent further edits
            </summary>
            <param name="calibrationId">The ID associated with the calibration</param>
            <returns>Confirmation that it was successful</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.CalibrationController.GetMyScores">
            <summary>
            Retrieves the scores from a logged in user
            </summary>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.FormController.GetActiveForms">
            <summary>
            Retrieves all active forms for creating a new calibration
            </summary>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.FormController.GetAllForms">
            <summary>
            Retrieves all forms
            </summary>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.FormController.CreateNewForm(CalibrationApp.Models.Form)">
            <summary>
            Creates a new form
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.FormController.SwitchIsArchivedForm(System.Int32)">
            <summary>
            Switches if a form is archived
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.FormController.UpdateForm(CalibrationApp.Models.Form)">
            <summary>
            Updates the entire form
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.GroupController.SubmitGroupAnswers(System.Collections.Generic.List{CalibrationApp.Models.Answer})">
            <summary>
            Submits the answers from the group for a specific calibration
            </summary>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.GroupController.GetGroupAnswers(System.Int32)">
            <summary>
            Retrieves the answers from the group for a specific calibration
            </summary>
            <param name="calibrationId"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.GroupController.UpdateScore(CalibrationApp.Models.Score)">
            <summary>
            Updates the score
            </summary>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.GroupController.UpdateAnswer(System.Collections.Generic.List{CalibrationApp.Models.Answer})">
            <summary>
            Updates the answer given
            </summary>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.IndividualController.SubmitAnswers(System.Collections.Generic.List{CalibrationApp.Models.Answer})">
            <summary>
            Submit answers for a calibration and a user
            </summary>
            <param name="answers">A List of answers</param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.IndividualController.SubmitScore(CalibrationApp.Models.Score)">
            <summary>
            Submits a score from a logged in user
            </summary>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.IndividualController.UpdateAnswers(System.Collections.Generic.List{CalibrationApp.Models.Answer})">
            <summary>
            Updating a round of answers
            </summary>
            <param name="answers">A list of Answers</param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.IndividualController.UpdateScore(CalibrationApp.Models.Score)">
            <summary>
            Retrieves scores for the logged in user
            </summary>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.IndividualController.GetParticipatingUsers(System.Int32)">
            <summary>
            Retrieves all participants of a specific calibration
            </summary>
            <param name="calibrationId">The calibration ID</param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.IndividualController.GetMyAnswers(System.Int32)">
            <summary>
            Gets the set of answers for the logged in user
            </summary>
            <param name="calibrationId">Calibration ID</param>
            <returns>List of Answers</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.LoginController.Ready">
            <summary>
            A test endpoint to ensure that the server is running.
            </summary>
        </member>
        <member name="M:CalibrationApp.Controllers.LoginController.Confirm">
            <summary>
            A test endpoint requiring authorization to ensure that authorization is working.
            </summary>
        </member>
        <member name="M:CalibrationApp.Controllers.LoginController.ConfirmAdmin">
            <summary>
            A test endpoint requiring authorization and the role of 'admin' to ensure that authorization is working.
            </summary>
        </member>
        <member name="M:CalibrationApp.Controllers.LoginController.Authenticate(CalibrationApp.Models.LoginUser)">
            <summary>
            Authenticates the user and returns a result including their authenticated token
            </summary>
            <param name="userParam">The login request</param>
        </member>
        <member name="M:CalibrationApp.Controllers.LoginController.Register(CalibrationApp.Models.RegisterUser)">
            <summary>
            Registers a new user.
            </summary>
            <param name="userParam">The new user to create</param>
        </member>
        <member name="M:CalibrationApp.Controllers.LoginController.UpdateUser(CalibrationApp.Models.StandardUser)">
            <summary>
            Updates information on the user
            </summary>
            <param name="user">The user information that's changing</param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.LoginController.ChangeActive(System.Int32)">
            <summary>
            Changes the user between active and inactive
            </summary>
            <param name="userId">The userId that's being switched</param>
            <returns>Confirmation that the action has been performed</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.OptionController.GetOptions(System.Int32)">
            <summary>
            Gets all options for a form
            </summary>
            <param name="formId">The form ID for the options</param>
            <returns>A list of options</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.OptionController.CreateNewOption(CalibrationApp.Models.Option)">
            <summary>
            Creatres a new option for a form
            </summary>
            <param name="option">The new option</param>
            <returns>The option with an optionId</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.QuestionController.GetQuestionsByCalibrationId(System.Int32)">
            <summary>
            Gets all questions linked to the calibration
            </summary>
            <param name="calibrationId">The Calibration ID for the questions</param>
            <returns>A list of Questions</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.QuestionController.GetQuestionsByFormId(System.Int32)">
            <summary>
            Gets all questions based on the form
            </summary>
            <param name="formId">The form ID of the questions</param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.QuestionController.UpdateAllQuestions(System.Collections.Generic.IEnumerable{CalibrationApp.Models.Question})">
            <summary>
            Updates all questions at once
            </summary>
            <param name="questions">A list of questions to update</param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.QuestionController.NewQuestion(CalibrationApp.Models.Question)">
            <summary>
            Creatres a new question
            </summary>
            <param name="question">The question to create</param>
            <returns>A question with a valid ID</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.QuestionController.GetEditQuestions(System.Int32)">
            <summary>
            Get questions in an editable list by formId
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.StatsController.GetOverallCalibrated">
            <summary>
            Retrieves an overall calibrated score
            </summary>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.StatsController.GetQuestionCalibrated">
            <summary>
            Retrieves a list of statistics based upon the questions in all calibrations
            </summary>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.StatsController.GetCalibrationCalibrated">
            <summary>
            Returns a list of statistics based upon the calibrationId
            </summary>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Controllers.StatsController.GetTypeCalibrated">
            <summary>
            Retuns a list of statistics based upon the type of calibrations
            </summary>
            <returns>A List of Types of Calibrations and Percentage Calibrated</returns>
        </member>
        <member name="M:CalibrationApp.Controllers.TeamsController.GetAllTeams">
            <summary>
            Returns all Teams
            </summary>
            <returns>A List of Teams</returns>
        </member>
        <member name="T:CalibrationApp.Models.LoginResponse">
            <summary>
            Model to return upon successful login (user data + token)
            </summary>
        </member>
        <member name="T:CalibrationApp.Models.LoginUser">
            <summary>
            Model to accept login parameters
            </summary>
        </member>
        <member name="T:CalibrationApp.Models.RegisterUser">
            <summary>
            Model to accept registration parameters
            </summary>
        </member>
        <member name="T:CalibrationApp.Models.StandardUser">
            <summary>
            Model of user data to return upon successful login
            </summary>
        </member>
        <member name="T:CalibrationApp.Security.IPasswordHasher">
            <summary>
            Represents a password hasher.
            </summary>
        </member>
        <member name="M:CalibrationApp.Security.IPasswordHasher.ComputeHash(System.String)">
            <summary>
            Given a clear text password, hash the password and return a Password Hash object.
            </summary>
            <param name="plainTextPassword">the password as given by the user.</param>
            <returns>A hashed password object.</returns>
        </member>
        <member name="M:CalibrationApp.Security.IPasswordHasher.VerifyHashMatch(System.String,System.String,System.String)">
            <summary>
            Verifies a match of an existing hashed password against a user input.
            </summary>
            <param name="existingHashedPassword">The existing hashed password.</param>
            <param name="plainTextPassword">The password as typed in by the user</param>
            <param name="salt">The salt used to compute the original hash.</param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Security.ITokenGenerator.GenerateToken(System.Int32,System.String)">
            <summary>
            Generates a new authentication token.
            </summary>
            <param name="userId">The user ID to generate the token for</param>
            <param name="username">The user's username</param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Security.ITokenGenerator.GenerateToken(System.Int32,System.String,System.String)">
            <summary>
            Generates a new authentication token.
            </summary>
            <param name="userId">The user ID to generate the token for</param>
            <param name="username">The user's username</param>
            <param name="role">The user's role</param>
            <returns></returns>
        </member>
        <member name="T:CalibrationApp.Security.Models.PasswordHash">
            <summary>
            Represents a hashed password.
            </summary>
        </member>
        <member name="M:CalibrationApp.Security.Models.PasswordHash.#ctor(System.String,System.String)">
            <summary>
            Creates a new hashed password.
            </summary>
            <param name="password">The hashed password</param>
            <param name="salt">The salt used to get the hashed password.</param>
        </member>
        <member name="P:CalibrationApp.Security.Models.PasswordHash.Password">
            <summary>
            The hashed password
            </summary>
        </member>
        <member name="P:CalibrationApp.Security.Models.PasswordHash.Salt">
            <summary>
            The salt used to get the hashed password.
            </summary>
        </member>
        <member name="T:CalibrationApp.Security.PasswordHasher">
            <summary>
            The hash provider provides functionality to hash a plain text password and validate
            an existing password against its hash.
            </summary>
        </member>
        <member name="M:CalibrationApp.Security.PasswordHasher.ComputeHash(System.String)">
            <summary>
            Hashes a plain text password.
            </summary>
            <param name="plainTextPassword"></param>
            <returns></returns>
        </member>
        <member name="M:CalibrationApp.Security.PasswordHasher.VerifyHashMatch(System.String,System.String,System.String)">
            <summary>
            Verifies if an existing hashed password matches a plaintext password (+salt).
            </summary>
            <param name="existingHashedPassword">The password we are comparing to.</param>
            <param name="plainTextPassword">The plaintext password being validated.</param>
            <param name="salt">The salt used to get the existing hashed password.</param>
            <returns></returns>
        </member>
    </members>
</doc>
